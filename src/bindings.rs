// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod wasi {
        pub mod virt {
            #[allow(clippy::all)]
            pub mod transform {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub enum HostEnv {
                    None,
                    All,
                    Allow(_rt::Vec<_rt::String>),
                    Deny(_rt::Vec<_rt::String>),
                }
                impl ::core::fmt::Debug for HostEnv {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            HostEnv::None => f.debug_tuple("HostEnv::None").finish(),
                            HostEnv::All => f.debug_tuple("HostEnv::All").finish(),
                            HostEnv::Allow(e) => f.debug_tuple("HostEnv::Allow").field(e).finish(),
                            HostEnv::Deny(e) => f.debug_tuple("HostEnv::Deny").field(e).finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct VirtEnv {
                    pub overrides: _rt::Vec<(_rt::String, _rt::String)>,
                    pub host: HostEnv,
                }
                impl ::core::fmt::Debug for VirtEnv {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("VirtEnv")
                            .field("overrides", &self.overrides)
                            .field("host", &self.host)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Options {
                    pub env: VirtEnv,
                }
                impl ::core::fmt::Debug for Options {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Options").field("env", &self.env).finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_transform_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let base7 = arg2;
                    let len7 = arg3;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 16);
                        let e7 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                            (_rt::string_lift(bytes3), _rt::string_lift(bytes6))
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 16, 4);
                    let v16 = match arg4 {
                        0 => HostEnv::None,
                        1 => HostEnv::All,
                        2 => {
                            let e16 = {
                                let base11 = arg5;
                                let len11 = arg6;
                                let mut result11 = _rt::Vec::with_capacity(len11);
                                for i in 0..len11 {
                                    let base = base11.add(i * 8);
                                    let e11 = {
                                        let l8 = *base.add(0).cast::<*mut u8>();
                                        let l9 = *base.add(4).cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 =
                                            _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                        _rt::string_lift(bytes10)
                                    };
                                    result11.push(e11);
                                }
                                _rt::cabi_dealloc(base11, len11 * 8, 4);

                                result11
                            };
                            HostEnv::Allow(e16)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e16 = {
                                let base15 = arg5;
                                let len15 = arg6;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 8);
                                    let e15 = {
                                        let l12 = *base.add(0).cast::<*mut u8>();
                                        let l13 = *base.add(4).cast::<usize>();
                                        let len14 = l13;
                                        let bytes14 =
                                            _rt::Vec::from_raw_parts(l12.cast(), len14, len14);

                                        _rt::string_lift(bytes14)
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 8, 4);

                                result15
                            };
                            HostEnv::Deny(e16)
                        }
                    };
                    let result17 = T::transform(
                        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
                        Options {
                            env: VirtEnv {
                                overrides: result7,
                                host: v16,
                            },
                        },
                    );
                    let ptr18 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result17 {
                        Ok(e) => {
                            *ptr18.add(0).cast::<u8>() = (0i32) as u8;
                            let vec19 = (e).into_boxed_slice();
                            let ptr19 = vec19.as_ptr().cast::<u8>();
                            let len19 = vec19.len();
                            ::core::mem::forget(vec19);
                            *ptr18.add(8).cast::<usize>() = len19;
                            *ptr18.add(4).cast::<*mut u8>() = ptr19.cast_mut();
                        }
                        Err(e) => {
                            *ptr18.add(0).cast::<u8>() = (1i32) as u8;
                            let vec20 = (e.into_bytes()).into_boxed_slice();
                            let ptr20 = vec20.as_ptr().cast::<u8>();
                            let len20 = vec20.len();
                            ::core::mem::forget(vec20);
                            *ptr18.add(8).cast::<usize>() = len20;
                            *ptr18.add(4).cast::<*mut u8>() = ptr20.cast_mut();
                        }
                    };
                    ptr18
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_transform<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn transform(
                        component: _rt::Vec<u8>,
                        options: Options,
                    ) -> Result<_rt::Vec<u8>, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_wasi_virt_transform_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wasi:virt/transform#transform"]
          unsafe extern "C" fn export_transform(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: i32,arg5: *mut u8,arg6: usize,) -> *mut u8 {
            $($path_to_types)*::_export_transform_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
          }
          #[export_name = "cabi_post_wasi:virt/transform#transform"]
          unsafe extern "C" fn _post_return_transform(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_transform::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_wasi_virt_transform_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_transformer_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wasi::virt::transform::__export_wasi_virt_transform_cabi!($ty with_types_in $($path_to_types_root)*::exports::wasi::virt::transform);
  )
}
#[doc(inline)]
pub(crate) use __export_transformer_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:transformer:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 350] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdc\x01\x01A\x02\x01\
A\x02\x01B\x0d\x01ps\x01q\x04\x04none\0\0\x03all\0\0\x05allow\x01\0\0\x04deny\x01\
\0\0\x04\0\x08host-env\x03\0\x01\x01o\x02ss\x01p\x03\x01r\x02\x09overrides\x04\x04\
host\x02\x04\0\x08virt-env\x03\0\x05\x01r\x01\x03env\x06\x04\0\x07options\x03\0\x07\
\x01p}\x01j\x01\x09\x01s\x01@\x02\x09component\x09\x07options\x08\0\x0a\x04\0\x09\
transform\x01\x0b\x04\x01\x13wasi:virt/transform\x05\0\x04\x01\x15wasi:virt/tran\
sformer\x04\0\x0b\x11\x01\0\x0btransformer\x03\0\0\0G\x09producers\x01\x0cproces\
sed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
